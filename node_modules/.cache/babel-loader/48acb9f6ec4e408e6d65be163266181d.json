{"ast":null,"code":"var _jsxFileName = \"/home/cherry-dev-04/user-ui/src/ReduxContainers/MyRequest.js\";\nimport React, { Fragment, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { userActions } from \"../ApiCall/rootApi\";\nimport { withRouter } from \"react-router-dom\"; //import queryString from \"query-string\";\n\nfunction MyRequest(props) {\n  // const query = queryString.parse(props.location.search);\n  // let params = new URLSearchParams(props.location.search);\n  //const [page, setPage] = useState(parseInt(query.page) || 1);\n  //const [state, setState] = useState(parseInt(query.state) || \"\");\n  //   const ticketList = useSelector(state => state.TicketListReducer.TicketList);\n  //   const ticketListLoading = useSelector(\n  //     state => state.TicketListReducer.loading\n  //   );\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const apiCall = () => {\n      dispatch(userActions.PriorityApi(), dispatch(userActions.DashBoardApi()));\n    };\n\n    apiCall();\n  }, [dispatch]); //Ticket List Refresh\n  // useEffect(() => {\n  //   const interval = setInterval(() => {\n  //     dispatch(userActions.TicketListRefreshApi(props.location.search));\n  //   }, 10000);\n  //   return () => {\n  //     clearInterval(interval);\n  //   };\n  // });\n  //Ticket List\n\n  async function fetchData() {\n    dispatch(userActions.TicketListApi(props.location.search));\n  }\n\n  useEffect(() => {\n    fetchData();\n  }, [props.location.search]); // const handleIncrement = () => {\n  //   setPage(page + 1);\n  //   params.set(\"page\", page + 1);\n  //   props.history.push({\n  //     pathname: \"/request\",\n  //     search: params.toString()\n  //   });\n  // };\n  // const handleDecrement = () => {\n  //   setPage(page - 1);\n  //   params.set(\"page\", page - 1);\n  //   props.history.push({\n  //     pathname: \"/request\",\n  //     search: params.toString()\n  //   });\n  // };\n  // const handleState = value => {\n  //   params.set(\"state\", value);\n  //   props.history.push({\n  //     pathname: \"/request\",\n  //     search: params.toString()\n  //   });\n  // };\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, \"My Request\"));\n}\n\nexport default withRouter(MyRequest);","map":{"version":3,"sources":["/home/cherry-dev-04/user-ui/src/ReduxContainers/MyRequest.js"],"names":["React","Fragment","useEffect","useDispatch","userActions","withRouter","MyRequest","props","dispatch","apiCall","PriorityApi","DashBoardApi","fetchData","TicketListApi","location","search"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,WAAT,QAA4B,oBAA5B;AACA,SAASC,UAAT,QAA2B,kBAA3B,C,CACA;;AACA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAMC,QAAQ,GAAGL,WAAW,EAA5B;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMO,OAAO,GAAG,MAAM;AACpBD,MAAAA,QAAQ,CAACJ,WAAW,CAACM,WAAZ,EAAD,EAA4BF,QAAQ,CAACJ,WAAW,CAACO,YAAZ,EAAD,CAApC,CAAR;AACD,KAFD;;AAGAF,IAAAA,OAAO;AACR,GALQ,EAKN,CAACD,QAAD,CALM,CAAT,CAVwB,CAgBxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,iBAAeI,SAAf,GAA2B;AACzBJ,IAAAA,QAAQ,CAACJ,WAAW,CAACS,aAAZ,CAA0BN,KAAK,CAACO,QAAN,CAAeC,MAAzC,CAAD,CAAR;AACD;;AACDb,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,SAAS;AACV,GAFQ,EAEN,CAACL,KAAK,CAACO,QAAN,CAAeC,MAAhB,CAFM,CAAT,CA7BwB,CAgCxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,sBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,CADF;AAKD;;AACD,eAAeV,UAAU,CAACC,SAAD,CAAzB","sourcesContent":["import React, { Fragment, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { userActions } from \"../ApiCall/rootApi\";\nimport { withRouter } from \"react-router-dom\";\n//import queryString from \"query-string\";\nfunction MyRequest(props) {\n  // const query = queryString.parse(props.location.search);\n  // let params = new URLSearchParams(props.location.search);\n  //const [page, setPage] = useState(parseInt(query.page) || 1);\n  //const [state, setState] = useState(parseInt(query.state) || \"\");\n  //   const ticketList = useSelector(state => state.TicketListReducer.TicketList);\n  //   const ticketListLoading = useSelector(\n  //     state => state.TicketListReducer.loading\n  //   );\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const apiCall = () => {\n      dispatch(userActions.PriorityApi(), dispatch(userActions.DashBoardApi()));\n    };\n    apiCall();\n  }, [dispatch]);\n  //Ticket List Refresh\n  // useEffect(() => {\n  //   const interval = setInterval(() => {\n  //     dispatch(userActions.TicketListRefreshApi(props.location.search));\n  //   }, 10000);\n  //   return () => {\n  //     clearInterval(interval);\n  //   };\n  // });\n  //Ticket List\n  async function fetchData() {\n    dispatch(userActions.TicketListApi(props.location.search));\n  }\n  useEffect(() => {\n    fetchData();\n  }, [props.location.search]);\n  // const handleIncrement = () => {\n  //   setPage(page + 1);\n  //   params.set(\"page\", page + 1);\n  //   props.history.push({\n  //     pathname: \"/request\",\n  //     search: params.toString()\n  //   });\n  // };\n  // const handleDecrement = () => {\n  //   setPage(page - 1);\n  //   params.set(\"page\", page - 1);\n  //   props.history.push({\n  //     pathname: \"/request\",\n  //     search: params.toString()\n  //   });\n  // };\n  // const handleState = value => {\n  //   params.set(\"state\", value);\n  //   props.history.push({\n  //     pathname: \"/request\",\n  //     search: params.toString()\n  //   });\n  // };\n  return (\n    <Fragment>\n      <div className=\"main\">My Request</div>\n    </Fragment>\n  );\n}\nexport default withRouter(MyRequest);\n"]},"metadata":{},"sourceType":"module"}
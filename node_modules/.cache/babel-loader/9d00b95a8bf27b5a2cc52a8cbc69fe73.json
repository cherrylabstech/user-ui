{"ast":null,"code":"var _jsxFileName = \"/home/cherry-dev-04/user-ui/src/ReduxContainers/MyRequest.js\";\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { userActions } from \"../ApiCall/rootApi\";\nimport { withRouter } from \"react-router-dom\";\nimport queryString from \"query-string\";\n\nfunction MyRequest(props) {\n  const query = queryString.parse(props.location.search);\n  const ticketListLoading = useSelector(state => state.TicketListReducer);\n  console.log(ticketListLoading);\n  const [page, setPage] = useState(parseInt(query.page) || 1);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const apiCall = () => {\n      dispatch(userActions.PriorityApi(), dispatch(userActions.DashBoardApi()));\n    };\n\n    apiCall();\n  }, [dispatch]); //Ticket List\n\n  useEffect(() => {\n    dispatch(userActions.TicketListApi(props.location.search));\n  }, [props.location.search, dispatch]);\n  let params = new URLSearchParams(props.location.search);\n\n  const handleIncrement = () => {\n    setPage(page + 1);\n    params.set(\"page\", page + 1);\n    props.history.push({\n      pathname: \"/request\",\n      search: params.toString()\n    });\n  };\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      dispatch(userActions.TicketListRefreshApi(props.location.search));\n    }, 10000);\n    return () => {\n      clearInterval(interval);\n    };\n  });\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, \"My Request\", /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleIncrement,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, \"Increment\")));\n}\n\nexport default withRouter(MyRequest);","map":{"version":3,"sources":["/home/cherry-dev-04/user-ui/src/ReduxContainers/MyRequest.js"],"names":["React","Fragment","useEffect","useState","useDispatch","useSelector","userActions","withRouter","queryString","MyRequest","props","query","parse","location","search","ticketListLoading","state","TicketListReducer","console","log","page","setPage","parseInt","dispatch","apiCall","PriorityApi","DashBoardApi","TicketListApi","params","URLSearchParams","handleIncrement","set","history","push","pathname","toString","interval","setInterval","TicketListRefreshApi","clearInterval"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,QAArC,QAAqD,OAArD;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,WAAT,QAA4B,oBAA5B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,WAAP,MAAwB,cAAxB;;AACA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACxB,QAAMC,KAAK,GAAGH,WAAW,CAACI,KAAZ,CAAkBF,KAAK,CAACG,QAAN,CAAeC,MAAjC,CAAd;AACA,QAAMC,iBAAiB,GAAGV,WAAW,CAACW,KAAK,IAAIA,KAAK,CAACC,iBAAhB,CAArC;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,iBAAZ;AACA,QAAM,CAACK,IAAD,EAAOC,OAAP,IAAkBlB,QAAQ,CAACmB,QAAQ,CAACX,KAAK,CAACS,IAAP,CAAR,IAAwB,CAAzB,CAAhC;AACA,QAAMG,QAAQ,GAAGnB,WAAW,EAA5B;AACAF,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMsB,OAAO,GAAG,MAAM;AACpBD,MAAAA,QAAQ,CAACjB,WAAW,CAACmB,WAAZ,EAAD,EAA4BF,QAAQ,CAACjB,WAAW,CAACoB,YAAZ,EAAD,CAApC,CAAR;AACD,KAFD;;AAGAF,IAAAA,OAAO;AACR,GALQ,EAKN,CAACD,QAAD,CALM,CAAT,CANwB,CAaxB;;AACArB,EAAAA,SAAS,CAAC,MAAM;AACdqB,IAAAA,QAAQ,CAACjB,WAAW,CAACqB,aAAZ,CAA0BjB,KAAK,CAACG,QAAN,CAAeC,MAAzC,CAAD,CAAR;AACD,GAFQ,EAEN,CAACJ,KAAK,CAACG,QAAN,CAAeC,MAAhB,EAAwBS,QAAxB,CAFM,CAAT;AAGA,MAAIK,MAAM,GAAG,IAAIC,eAAJ,CAAoBnB,KAAK,CAACG,QAAN,CAAeC,MAAnC,CAAb;;AACA,QAAMgB,eAAe,GAAG,MAAM;AAC5BT,IAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACAQ,IAAAA,MAAM,CAACG,GAAP,CAAW,MAAX,EAAmBX,IAAI,GAAG,CAA1B;AACAV,IAAAA,KAAK,CAACsB,OAAN,CAAcC,IAAd,CAAmB;AACjBC,MAAAA,QAAQ,EAAE,UADO;AAEjBpB,MAAAA,MAAM,EAAEc,MAAM,CAACO,QAAP;AAFS,KAAnB;AAID,GAPD;;AAQAjC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMkC,QAAQ,GAAGC,WAAW,CAAC,MAAM;AACjCd,MAAAA,QAAQ,CAACjB,WAAW,CAACgC,oBAAZ,CAAiC5B,KAAK,CAACG,QAAN,CAAeC,MAAhD,CAAD,CAAR;AACD,KAF2B,EAEzB,KAFyB,CAA5B;AAIA,WAAO,MAAM;AACXyB,MAAAA,aAAa,CAACH,QAAD,CAAb;AACD,KAFD;AAGD,GARQ,CAAT;AASA,sBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAEE;AAAQ,IAAA,OAAO,EAAEN,eAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFF,CADF,CADF;AAQD;;AACD,eAAevB,UAAU,CAACE,SAAD,CAAzB","sourcesContent":["import React, { Fragment, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { userActions } from \"../ApiCall/rootApi\";\nimport { withRouter } from \"react-router-dom\";\nimport queryString from \"query-string\";\nfunction MyRequest(props) {\n  const query = queryString.parse(props.location.search);\n  const ticketListLoading = useSelector(state => state.TicketListReducer);\n  console.log(ticketListLoading);\n  const [page, setPage] = useState(parseInt(query.page) || 1);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const apiCall = () => {\n      dispatch(userActions.PriorityApi(), dispatch(userActions.DashBoardApi()));\n    };\n    apiCall();\n  }, [dispatch]);\n\n  //Ticket List\n  useEffect(() => {\n    dispatch(userActions.TicketListApi(props.location.search));\n  }, [props.location.search, dispatch]);\n  let params = new URLSearchParams(props.location.search);\n  const handleIncrement = () => {\n    setPage(page + 1);\n    params.set(\"page\", page + 1);\n    props.history.push({\n      pathname: \"/request\",\n      search: params.toString()\n    });\n  };\n  useEffect(() => {\n    const interval = setInterval(() => {\n      dispatch(userActions.TicketListRefreshApi(props.location.search));\n    }, 10000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  });\n  return (\n    <Fragment>\n      <div className=\"main\">\n        My Request\n        <button onClick={handleIncrement}>Increment</button>\n      </div>\n    </Fragment>\n  );\n}\nexport default withRouter(MyRequest);\n"]},"metadata":{},"sourceType":"module"}